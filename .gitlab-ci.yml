stages:
  - sonarCloud
  - deployStaging
  - deployProduction

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

buildSonarCloud:
  stage: sonarCloud
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop

buildStaging:
  stage: deployStaging
  image: docker:stable
  services:    
    - docker:stable-dind
  script:
    - echo "Building staging docker image..."
    - VERSION="${CI_COMMIT_TAG:1}"
    - CONTAINER_IMAGE_LATEST="${CONTAINER_IMAGE}:${CI_COMMIT_TAG:1}"
    - apk add --no-cache curl jq python3 py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - docker build -t ${CONTAINER_IMAGE_LATEST} .
    - docker push ${CONTAINER_IMAGE_LATEST}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$ECS_TASK_DEF" --region "$AWS_DEFAULT_REGION")
    - NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$CONTAINER_IMAGE_LATEST" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.registeredAt) | del(.registeredBy) | del(.requiresAttributes) | del(.compatibilities)')
    - NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
    - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
    - aws ecs update-service --cluster $ECS_NEW_STAGING_CLUSTER --service $ECS_SERVICE_NAME --task-definition $ECS_TASK_DEF
  only:
    - tags
  except:
    - branches

buildProduction:
  stage: deployProduction
  image: docker:stable
  services:    
    - docker:stable-dind
  script:
    - echo "Building production docker image..."
    - VERSION="${CI_COMMIT_TAG:1}"
    - CONTAINER_IMAGE_LATEST="${CONTAINER_IMAGE_PROD}:${CI_COMMIT_TAG:1}"
    - apk add --no-cache curl jq python3 py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - docker build -f Dockerfile.prod -t ${CONTAINER_IMAGE_LATEST} .
    - docker push ${CONTAINER_IMAGE_LATEST}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$ECS_TASK_DEF_PROD" --region "$AWS_DEFAULT_REGION")
    - NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$CONTAINER_IMAGE_LATEST" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.registeredAt) | del(.registeredBy) | del(.requiresAttributes) | del(.compatibilities)')
    - NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
    - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
    - aws ecs update-service --cluster $ECS_NEW_CLUSTER_PROD --service $ECS_SERVICE_NAME_PROD --task-definition $ECS_TASK_DEF_PROD
  when: manual
  only:
    - tags
  except:
    - branches